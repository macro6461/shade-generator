{"ast":null,"code":"var _jsxFileName = \"/Users/matthewcroak/Development/shade-generator/shade-generator/src/components/RGBInput.js\";\nimport React, { useState } from 'react';\nimport { InputNumber } from 'antd';\n\nconst RGBInput = props => {\n  const {\n    color,\n    setColor\n  } = props;\n  const [rgbColor, setRGBColor] = useState({\n    r: null,\n    g: null,\n    b: null\n  });\n\n  const addComma = text => {\n    let chunks = [];\n\n    for (let i = 0; i < text.length; i += 3) {\n      chunks.push(text.substr(i, 3));\n    }\n\n    return chunks.join();\n  };\n\n  const onChange = (e, key) => {\n    debugger;\n    var myColor = e.target.value.replace(/\\W|_|[a-zA-Z]/g, \"\");\n    myColor = addComma(myColor);\n    setColor(myColor);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, \"RGB(\", /*#__PURE__*/React.createElement(InputNumber, {\n    value: r,\n    style: {\n      width: 50\n    },\n    onChange: e => onChange(e, 'r'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(InputNumber, {\n    value: g,\n    style: {\n      width: 50\n    },\n    onChange: e => onChange(e, 'g'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(InputNumber, {\n    value: b,\n    style: {\n      width: 50\n    },\n    onChange: e => onChange(e, 'b'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default RGBInput;","map":{"version":3,"sources":["/Users/matthewcroak/Development/shade-generator/shade-generator/src/components/RGBInput.js"],"names":["React","useState","InputNumber","RGBInput","props","color","setColor","rgbColor","setRGBColor","r","g","b","addComma","text","chunks","i","length","push","substr","join","onChange","e","key","myColor","target","value","replace","width"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,WAAR,QAA0B,MAA1B;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAU;AAEvB,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAoBF,KAA1B;AAEA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC;AAACQ,IAAAA,CAAC,EAAE,IAAJ;AAAUC,IAAAA,CAAC,EAAE,IAAb;AAAmBC,IAAAA,CAAC,EAAE;AAAtB,GAAD,CAAxC;;AAEA,QAAMC,QAAQ,GAAIC,IAAD,IAAS;AACtB,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,IAAI,CAACG,MAAxB,EAAgCD,CAAC,IAAE,CAAnC,EAAqC;AACnCD,MAAAA,MAAM,CAACG,IAAP,CAAYJ,IAAI,CAACK,MAAL,CAAYH,CAAZ,EAAc,CAAd,CAAZ;AACD;;AACD,WAAOD,MAAM,CAACK,IAAP,EAAP;AACA,GANJ;;AAQA,QAAMC,QAAQ,GAAG,CAACC,CAAD,EAAIC,GAAJ,KAAW;AACxB;AACA,QAAIC,OAAO,GAAGF,CAAC,CAACG,MAAF,CAASC,KAAT,CAAeC,OAAf,CAAuB,gBAAvB,EAAyC,EAAzC,CAAd;AACAH,IAAAA,OAAO,GAAGX,QAAQ,CAACW,OAAD,CAAlB;AACAjB,IAAAA,QAAQ,CAACiB,OAAD,CAAR;AACH,GALD;;AAOA,sBACI,+DAEQ,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAEd,CAApB;AAAuB,IAAA,KAAK,EAAE;AAACkB,MAAAA,KAAK,EAAE;AAAR,KAA9B;AAA2C,IAAA,QAAQ,EAAGN,CAAD,IAAKD,QAAQ,CAACC,CAAD,EAAI,GAAJ,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,eAGQ,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAEX,CAApB;AAAuB,IAAA,KAAK,EAAE;AAACiB,MAAAA,KAAK,EAAE;AAAR,KAA9B;AAA2C,IAAA,QAAQ,EAAGN,CAAD,IAAKD,QAAQ,CAACC,CAAD,EAAI,GAAJ,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHR,eAIQ,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAEV,CAApB;AAAuB,IAAA,KAAK,EAAE;AAACgB,MAAAA,KAAK,EAAE;AAAR,KAA9B;AAA2C,IAAA,QAAQ,EAAGN,CAAD,IAAKD,QAAQ,CAACC,CAAD,EAAI,GAAJ,CAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJR,CADJ;AASH,CA9BD;;AAgCA,eAAelB,QAAf","sourcesContent":["import React, {useState} from 'react';\nimport {InputNumber} from 'antd';\n\nconst RGBInput = (props) =>{\n\n    const {color, setColor} = props;\n\n    const [rgbColor, setRGBColor] = useState({r: null, g: null, b: null})\n\n    const addComma = (text) =>{\n        let chunks = [];\n        for(let i = 0; i < text.length; i+=3){\n          chunks.push(text.substr(i,3));\n        }\n        return chunks.join();\n       }\n\n    const onChange = (e, key) =>{\n        debugger\n        var myColor = e.target.value.replace(/\\W|_|[a-zA-Z]/g, \"\")\n        myColor = addComma(myColor)\n        setColor(myColor)\n    }\n\n    return (\n        <>\n            RGB(\n                <InputNumber value={r} style={{width: 50}} onChange={(e)=>onChange(e, 'r')}/>\n                <InputNumber value={g} style={{width: 50}} onChange={(e)=>onChange(e, 'g')}/>\n                <InputNumber value={b} style={{width: 50}} onChange={(e)=>onChange(e, 'b')}/>\n        </>\n    )\n\n};\n\nexport default RGBInput;"]},"metadata":{},"sourceType":"module"}