{"ast":null,"code":"var _jsxFileName = \"/Users/matthewcroak/Development/shade-generator/shade-generator/src/components/RGBInput.js\";\nimport React, { useState } from 'react';\nimport { InputNumber } from 'antd';\nimport './../App.css';\n\nconst RGBInput = props => {\n  const {\n    color,\n    setColor\n  } = props;\n  const [red, setRed] = useState(null);\n  const [green, setGreen] = useState(null);\n  const [blue, setBlue] = useState(null);\n  const funcs = {\n    red: setRed,\n    green: setGreen,\n    blue: setBlue\n  };\n\n  const addComma = text => {\n    let chunks = [];\n\n    for (let i = 0; i < text.length; i += 3) {\n      chunks.push(text.substr(i, 3));\n    }\n\n    return chunks.join();\n  };\n\n  const onChange = (e, key) => {\n    var myFunc = funcs[key];\n    myFunc(e.toString().replace(/\\W|_|[a-zA-Z]/g, \"\")); // myRGB[key] = e.toString().replace(/\\W|_|[a-zA-Z]/g, \"\")\n    // setRGBColor(myRGB)\n    // var myColor = e.target.value.replace(/\\W|_|[a-zA-Z]/g, \"\")\n    // myColor = addComma(myColor)\n    // setColor(myColor)\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, \"RGB(\", /*#__PURE__*/React.createElement(InputNumber, {\n    className: \"rgbInput\",\n    value: red,\n    style: {\n      width: 50\n    },\n    onChange: e => onChange(e, 'red'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(InputNumber, {\n    className: \"rgbInput\",\n    value: green,\n    style: {\n      width: 50\n    },\n    onChange: e => onChange(e, 'green'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(InputNumber, {\n    className: \"rgbInput\",\n    value: blue,\n    style: {\n      width: 50,\n      marginRight: 10\n    },\n    onChange: e => onChange(e, 'blue'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }), \" )\");\n};\n\nexport default RGBInput;","map":{"version":3,"sources":["/Users/matthewcroak/Development/shade-generator/shade-generator/src/components/RGBInput.js"],"names":["React","useState","InputNumber","RGBInput","props","color","setColor","red","setRed","green","setGreen","blue","setBlue","funcs","addComma","text","chunks","i","length","push","substr","join","onChange","e","key","myFunc","toString","replace","width","marginRight"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,WAAR,QAA0B,MAA1B;AACA,OAAO,cAAP;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAU;AAEvB,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAoBF,KAA1B;AAEA,QAAM,CAACG,GAAD,EAAMC,MAAN,IAAgBP,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,IAAD,CAAhC;AAEA,QAAMY,KAAK,GAAG;AAACN,IAAAA,GAAG,EAAEC,MAAN;AAAcC,IAAAA,KAAK,EAAEC,QAArB;AAA+BC,IAAAA,IAAI,EAAEC;AAArC,GAAd;;AAEA,QAAME,QAAQ,GAAIC,IAAD,IAAS;AACtB,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGF,IAAI,CAACG,MAAxB,EAAgCD,CAAC,IAAE,CAAnC,EAAqC;AACnCD,MAAAA,MAAM,CAACG,IAAP,CAAYJ,IAAI,CAACK,MAAL,CAAYH,CAAZ,EAAc,CAAd,CAAZ;AACD;;AACD,WAAOD,MAAM,CAACK,IAAP,EAAP;AACH,GAND;;AAQA,QAAMC,QAAQ,GAAG,CAACC,CAAD,EAAIC,GAAJ,KAAW;AACxB,QAAIC,MAAM,GAAGZ,KAAK,CAACW,GAAD,CAAlB;AACAC,IAAAA,MAAM,CAACF,CAAC,CAACG,QAAF,GAAaC,OAAb,CAAqB,gBAArB,EAAuC,EAAvC,CAAD,CAAN,CAFwB,CAGxB;AACA;AACA;AACA;AACA;AACH,GARD;;AAUA,sBACI,+DAEQ,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAC,UAAvB;AAAkC,IAAA,KAAK,EAAEpB,GAAzC;AAA8C,IAAA,KAAK,EAAE;AAACqB,MAAAA,KAAK,EAAE;AAAR,KAArD;AAAkE,IAAA,QAAQ,EAAGL,CAAD,IAAKD,QAAQ,CAACC,CAAD,EAAI,KAAJ,CAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,eAGQ,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAC,UAAvB;AAAkC,IAAA,KAAK,EAAEd,KAAzC;AAAgD,IAAA,KAAK,EAAE;AAACmB,MAAAA,KAAK,EAAE;AAAR,KAAvD;AAAoE,IAAA,QAAQ,EAAGL,CAAD,IAAKD,QAAQ,CAACC,CAAD,EAAI,OAAJ,CAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHR,eAIQ,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAC,UAAvB;AAAkC,IAAA,KAAK,EAAEZ,IAAzC;AAA+C,IAAA,KAAK,EAAE;AAACiB,MAAAA,KAAK,EAAE,EAAR;AAAYC,MAAAA,WAAW,EAAE;AAAzB,KAAtD;AAAoF,IAAA,QAAQ,EAAGN,CAAD,IAAKD,QAAQ,CAACC,CAAD,EAAI,MAAJ,CAA3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJR,OADJ;AASH,CArCD;;AAuCA,eAAepB,QAAf","sourcesContent":["import React, {useState} from 'react';\nimport {InputNumber} from 'antd';\nimport './../App.css'\n\nconst RGBInput = (props) =>{\n\n    const {color, setColor} = props;\n\n    const [red, setRed] = useState(null)\n    const [green, setGreen] = useState(null)\n    const [blue, setBlue] = useState(null)\n\n    const funcs = {red: setRed, green: setGreen, blue: setBlue}\n\n    const addComma = (text) =>{\n        let chunks = [];\n        for(let i = 0; i < text.length; i+=3){\n          chunks.push(text.substr(i,3));\n        }\n        return chunks.join();\n    }\n\n    const onChange = (e, key) =>{\n        var myFunc = funcs[key]\n        myFunc(e.toString().replace(/\\W|_|[a-zA-Z]/g, \"\"))\n        // myRGB[key] = e.toString().replace(/\\W|_|[a-zA-Z]/g, \"\")\n        // setRGBColor(myRGB)\n        // var myColor = e.target.value.replace(/\\W|_|[a-zA-Z]/g, \"\")\n        // myColor = addComma(myColor)\n        // setColor(myColor)\n    }\n\n    return (\n        <>\n            RGB(\n                <InputNumber className='rgbInput' value={red} style={{width: 50}} onChange={(e)=>onChange(e, 'red')}/>\n                <InputNumber className='rgbInput' value={green} style={{width: 50}} onChange={(e)=>onChange(e, 'green')}/>\n                <InputNumber className='rgbInput' value={blue} style={{width: 50, marginRight: 10}} onChange={(e)=>onChange(e, 'blue')}/> )\n        </>\n    )\n\n};\n\nexport default RGBInput;"]},"metadata":{},"sourceType":"module"}