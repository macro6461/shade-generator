{"ast":null,"code":"var _jsxFileName = \"/Users/matthewcroak/Development/shade-generator/shade-generator/src/App.js\";\nimport React, { useState } from \"react\";\nimport Buttons from \"./components/Buttons\";\nimport RGBInput from \"./components/RGBInput\";\nimport SubmitButton from \"./components/SubmitButton\";\nimport { Input, Button, Tooltip, Radio } from \"antd\";\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\nexport default function App() {\n  const [color, setColor] = useState(null);\n  const [colors, setColors] = useState([]);\n  const [type, setType] = useState(1);\n  const [rgb, setRgb] = useState(false);\n\n  const genColor = e => {\n    var myColor;\n\n    if (type === 1) {\n      myColor = e.target.value.replace(/#/g, \"\");\n    } else {\n      myColor = e.target.value.replace(/\\W|_|[0-9]/g, \"\");\n    }\n\n    setColor(myColor);\n  };\n\n  const addColor = rgbColor => {\n    var arr = colors;\n    var myColor = color;\n\n    if (rgbColor) {\n      setRgb(true);\n    }\n\n    if (type === 1) {\n      myColor = \"#\" + color;\n    } else if (type === 2) {\n      myColor = rgbColor;\n    } else {\n      myColor = myColor.toLowerCase();\n    }\n\n    if (!isColor(myColor)) {\n      alert(\"Invalid color. Please check your spelling.\");\n      setColors(arr);\n    } else if (arr.indexOf(myColor) === -1) {\n      arr.push(myColor);\n      setColors(arr);\n      setRgb(false);\n    }\n\n    setColor(null);\n  };\n\n  const isColor = x => {\n    var s = new Option().style;\n    s.color = x;\n    return s.color.length > 1;\n  };\n\n  const changeType = x => {\n    setType(x.target.value);\n    setColor(null);\n  };\n\n  console.log(rgb);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, \"Shade Generator\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Radio.Group, {\n    onChange: changeType,\n    value: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Radio, {\n    value: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, \"HEX\"), /*#__PURE__*/React.createElement(Radio, {\n    value: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"RGB\"), /*#__PURE__*/React.createElement(Radio, {\n    value: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"Text\"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, type === 2 ? /*#__PURE__*/React.createElement(RGBInput, {\n    color: color,\n    addColor: addColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(Input, {\n    prefix: type === 1 ? \"#\" : null,\n    onChange: genColor,\n    placeholder: type === 1 ? \"Enter Hex Code\" : 'Enter Color',\n    value: color,\n    style: {\n      width: 200\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }), type !== 2 ? /*#__PURE__*/React.createElement(SubmitButton, {\n    enabled: color,\n    onClick: addColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 10\n    }\n  }) : null), /*#__PURE__*/React.createElement(Buttons, {\n    colors: colors,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/matthewcroak/Development/shade-generator/shade-generator/src/App.js"],"names":["React","useState","Buttons","RGBInput","SubmitButton","Input","Button","Tooltip","Radio","PlusCircleOutlined","App","color","setColor","colors","setColors","type","setType","rgb","setRgb","genColor","e","myColor","target","value","replace","addColor","rgbColor","arr","toLowerCase","isColor","alert","indexOf","push","x","s","Option","style","length","changeType","console","log","width"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Buttons from \"./components/Buttons\";\nimport RGBInput from \"./components/RGBInput\";\nimport SubmitButton from \"./components/SubmitButton\"\nimport { Input, Button, Tooltip, Radio } from \"antd\";\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [color, setColor] = useState(null);\n  const [colors, setColors] = useState([]);\n  const [type, setType] = useState(1);\n  const [rgb, setRgb] = useState(false);\n\n  const genColor = e => {\n    var myColor \n\n    if (type === 1){\n      myColor = e.target.value.replace(/#/g, \"\");\n    } else {\n      myColor = e.target.value.replace(/\\W|_|[0-9]/g, \"\")\n    }\n    \n    setColor(myColor);\n  };\n\n  const addColor = (rgbColor) => {\n    var arr = colors;\n    var myColor = color\n\n    if (rgbColor){\n      setRgb(true)\n    }\n\n    if (type === 1){\n      myColor = \"#\" + color;\n    } else if (type === 2){\n      myColor = rgbColor\n    } else {\n      myColor = myColor.toLowerCase()\n    }\n\n    if (!isColor(myColor)) {\n      alert(\"Invalid color. Please check your spelling.\")\n      setColors(arr);\n    } else if (arr.indexOf(myColor) === -1){\n      arr.push(myColor);\n      setColors(arr)\n      setRgb(false)\n    }\n    setColor(null);\n  };\n\n  const isColor = (x) => {\n    var s = new Option().style;\n    s.color = x\n    return s.color.length > 1;\n  };\n\n  const changeType = (x)=> {\n    setType(x.target.value)\n    setColor(null);\n  }\n\n  console.log(rgb)\n\n  return (\n    <div className=\"App\">\n      <h1>Shade Generator</h1>\n      <div>\n      <Radio.Group onChange={changeType} value={type}>\n        <Radio value={1}>HEX</Radio>\n        <Radio value={2}>RGB</Radio>\n        <Radio value={3}>Text</Radio>\n      </Radio.Group>\n      </div>\n      <div>\n     {type === 2\n      ? <RGBInput color={color} addColor={addColor}/>\n      : <Input\n      prefix={type === 1 ? \"#\" : null} \n      onChange={genColor}\n      placeholder={type === 1 ? \"Enter Hex Code\" : 'Enter Color'}\n      value={color}\n      style={{ width: 200 }}\n    />\n    }\n      {type !== 2 \n       ? <SubmitButton enabled={color} onClick={addColor}/>\n       : null\n      }\n      </div>\n      <Buttons colors={colors} />\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}